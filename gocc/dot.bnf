// The DOT Language
//
// http://www.graphviz.org/doc/info/lang.html

// ### [ Tokens ] ##############################################################

// The keywords node, edge, graph, digraph, subgraph, and strict are case-
// independent.

node
	: 'n' 'o' 'd' 'e'
	| 'N' 'o' 'd' 'e'
	| 'N' 'O' 'D' 'E'
;

edge
	: 'e' 'd' 'g' 'e'
	| 'E' 'd' 'g' 'e'
	| 'E' 'D' 'G' 'E'
;

// TODO: Rename graphx to graph once gocc#20 is fixed [1].
//
// [1]: https://github.com/goccmack/gocc/issues/20

graphx
	: 'g' 'r' 'a' 'p' 'h'
	| 'G' 'r' 'a' 'p' 'h'
	| 'G' 'R' 'A' 'P' 'H'
;

digraph
	: 'd' 'i' 'g' 'r' 'a' 'p' 'h'
	| 'D' 'i' 'g' 'r' 'a' 'p' 'h'
	| 'D' 'i' 'G' 'r' 'a' 'p' 'h'
	| 'D' 'I' 'G' 'R' 'A' 'P' 'H'
;

subgraph
	: 's' 'u' 'b' 'g' 'r' 'a' 'p' 'h'
	| 'S' 'u' 'b' 'g' 'r' 'a' 'p' 'h'
	| 'S' 'u' 'b' 'G' 'r' 'a' 'p' 'h'
	| 'S' 'U' 'B' 'G' 'R' 'A' 'P' 'H'
;

strict
	: 's' 't' 'r' 'i' 'c' 't'
	| 'S' 't' 'r' 'i' 'c' 't'
	| 'S' 'T' 'R' 'I' 'C' 'T'
;

_ascii_letter : 'a' - 'z' | 'A' - 'Z' ;
_ascii_digit  : '0' - '9' ;
_letter        : _ascii_letter | '_' ;
_decimal_digit : _ascii_digit ;

// An ID is one of the following:
//
//    1) Any string of alphabetic ([a-zA-Z\200-\377]) characters, underscores
//       ('_') or digits ([0-9]), not beginning with a digit;
//
//    2) a numeral [-]?(.[0-9]+ | [0-9]+(.[0-9]*)? );
//
//    3) any double-quoted string ("...") possibly containing escaped quotes
//       (\")1;
//
//    4) an HTML string (<...>).

// TODO: Check what \200-\377 means in the 1st representation of IDs.
// TODO: Add support for the 2nd, 3rd and 4th representation of IDs.

id : _letter { _letter | _decimal_digit } ;

// edgeop : "--" | "-->"

edgeop
	: '-' '-'
	| '-' '>'
;

// ### [ Syntax ] ##############################################################

<< import "github.com/graphism/dot/gocc/ast/astx" >>

// === [ Graphs ] ==============================================================

// Graph : [ "strict" ] ( "graph" | "digraph" ) [ ID ] "{" OptStmtList "}"

Graph
	: OptStrict Directed OptID
	  "{" OptStmtList "}"               << astx.NewGraph($0, $1, $2, $4) >>
;

OptStrict
	: empty                             << false, nil >>
	| strict                            << true, nil >>
;

Directed
	: graphx                            << false, nil >>
	| digraph                           << true, nil >>
;

ID
	: id                                << astx.NewID($0) >>
;

OptID
	: empty                             << "", nil >>
	| ID
;

// === [ Statements ] ==========================================================

// StmtList
//    : Stmt [ ";" ]
//    | Stmt [ ";" ] StmtList

StmtList
	: Stmt OptSemi
	| Stmt OptSemi StmtList
;

OptStmtList
	: empty
	| StmtList
;

// Stmt
//    : NodeStmt
//    | EdgeStmt
//    | AttrStmt
//    | Attr
//    | Subgraph

Stmt
	: NodeStmt
	| EdgeStmt
	| AttrStmt
	| Attr
	| Subgraph
;

OptSemi
	: empty
	| ";"
;

// --- [ Node statement ] ------------------------------------------------------

// NodeStmt : NodeID [ AttrList ]

NodeStmt
	: NodeID OptAttrList
;

// --- [ Edge statement ] ------------------------------------------------------

// EdgeStmt : ( NodeID | Subgraph ) Edge [ AttrList ]

EdgeStmt
	: Vertex Edge OptAttrList
;

// Edge : edgeop ( NodeID | Subgraph ) [ Edge ]

Edge
	: edgeop Vertex OptEdge
;

OptEdge
	: empty
	| Edge
;

// --- [ Attribute statement ] -------------------------------------------------

// AttrStmt : ( "graph" | "node" | "edge" ) AttrList

AttrStmt
	: Component AttrList
;

Component
	: graphx
	| node
	| edge
;

// AttrList : "[" [ AList ] "]" [ AttrList ]

AttrList
	: "[" OptAList "]" OptAttrList
;

OptAttrList
	: empty
	| AttrList
;

// AList : Attr [ (";" | ",") ] [ AList ]

AList
	: Attr OptSep OptAList
;

OptAList
	: empty
	| AList
;

OptSep
	: empty
	| ";"
	| ","
;

// --- [ Attribute ] -----------------------------------------------------------

Attr
	: ID "=" ID
;

// --- [ Subgraph ] ------------------------------------------------------------

// Subgraph : [ "subgraph" [ ID ] ] "{" OptStmtList "}"

Subgraph
	: OptSubgraphID "{" OptStmtList "}"
;

OptSubgraphID
	: subgraph OptID
;

// === [ Vertices ] ============================================================

Vertex
	: NodeID
	| Subgraph
;

// --- [ Node identifier ] -----------------------------------------------------

// NodeID : ID [ Port ]

NodeID
	: ID OptPort
;

// Port
//    : ":" ID [ ":" CompassPoint ]
//    | ":" CompassPoint
//
// CompassPoint
//    : "n" | "ne" | "e" | "se" | "s" | "sw" | "w" | "nw" | "c" | "_"

// Note also that the allowed compass point values are not keywords, so these
// strings can be used elsewhere as ordinary identifiers and, conversely, the
// parser will actually accept any identifier.

Port
	: ":" ID
	| ":" ID ":" ID
;

OptPort
	: empty
	| Port
;
